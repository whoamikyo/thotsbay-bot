name: Tests and Run

on:
  schedule:
    - cron: "0 */4 * * *"
  workflow_dispatch:
    inputs:
      force:
        description: "Enter 'force' if you want to force a refresh"
        required: false
        default: ""

env:
  RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
  THOTSBAY_USER: ${{ secrets.THOTSBAY_USER }}
  THOTSBAY_PW: ${{ secrets.THOTSBAY_PW }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  ID_CONFIG_WRITE: ${{ secrets.ID_CONFIG_WRITE }}
  CONFIG_WRITE: ${{ secrets.CONFIG_WRITE }}
  CONFIG_READ: ${{ secrets.CONFIG_READ }}
  ID_CONFIG_READ: ${{ secrets.ID_CONFIG_READ }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  CDN: ${{ secrets.CDN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REFERER: ${{ secrets.REFERER }}
  API_KEY: ${{ secrets.API_KEY }}
  URL_BASE: ${{ secrets.URL_BASE }}
  CYBERDROP_TOKEN: ${{ secrets.CYBERDROP_TOKEN }}
  IMGUR_BEARER: ${{ secrets.IMGUR_BEARER }}
  ID_CONFIG_TESTE: ${{ secrets.ID_CONFIG_TESTE }}
  GALLERY : ${{ secrets.GALLERY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.4"
      - name: Set up poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.13

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s python -m poetry run pip --version || rm -rf .venv

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf

      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Run isort
        shell: bash
        run: python -m poetry run python -m isort .

      - name: Run black
        shell: bash
        run: python -m poetry run python -m black .

      - name: Run main.py
        run: |
          poetry run python main.py

      - name: Run if Failed
        if: steps.build.status == 'failed'
        run: |
          poetry run python main.py

      - name: ðŸš€ Deploy changes
        run: |
          # set git author
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "Auto-update"
          # finally push
          git push
